version: '3'

services:
  traefik:
    image: "traefik:latest"
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    ports:
      - "8105:80"
    networks:
      - app_net
      - front_net
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  landing-page-microfronted:
    build:
      context: landing-page/.
      dockerfile: Dockerfile
    deploy:
      mode: replicated
      replicas: 2
      placement:
        constraints:
          - node.role == manager
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.index-page-app.rule=(PathPrefix(`/index`))"
      - "traefik.http.services.index-page-app.loadbalancer.server.port=4200"
    networks:
      - front_net
  
  auth-page-microfronted:
    build:
      context: auth-page/.
      dockerfile: Dockerfile
    deploy:
      mode: replicated
      replicas: 2
      placement:
        constraints:
          - node.role == manager
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth-page-app.rule=(PathPrefix(`/auth`))"
      - "traefik.http.services.auth-page-app.loadbalancer.server.port=4200"
    networks:
      - front_net

  dashboard-page-microfronted:
    build:
      context: dashboard-page/.
      dockerfile: Dockerfile
    deploy:
      mode: replicated
      replicas: 2
      placement:
        constraints:
          - node.role == manager
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard-page-app.rule=(PathPrefix(`/dashboard`))"
      - "traefik.http.services.dashboard-page-app.loadbalancer.server.port=4200"
    networks:
      - front_net

  user-microservice:
    build:
      context: user-service/.
      dockerfile: Dockerfile
    deploy:
      mode: replicated
      replicas: 2
      placement:
        constraints:
          - node.role == manager
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.users-app.rule=(PathPrefix(`/users`))"
      - "traefik.http.routers.users-app.middlewares=users-stripprefix"
      - "traefik.http.middlewares.users-stripprefix.stripprefix.prefixes=/users/"
      - "traefik.http.services.users-app.loadbalancer.server.port=5000"
    networks:
      - app_net
      - users_net
  
  parameter-microservice:
    build:
      context: parameters-service/.
      dockerfile: Dockerfile
    deploy:
      mode: replicated
      replicas: 2
      placement:
        constraints:
          - node.role == manager
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.parameters-app.rule=(PathPrefix(`/parameters`))"
      - "traefik.http.routers.parameters-app.middlewares=parameters-stripprefix"
      - "traefik.http.middlewares.parameters-stripprefix.stripprefix.prefixes=/parameters/"
      - "traefik.http.services.parameters-app.loadbalancer.server.port=5000"
    networks:
      - app_net
      - parameters_net

  ontology-microservice:
    build:
      context: ontology-service/.
      dockerfile: Dockerfile
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ontologies-app.rule=(PathPrefix(`/ontologies`))"
      - "traefik.http.routers.ontologies-app.middlewares=ontologies-stripprefix"
      - "traefik.http.middlewares.ontologies-stripprefix.stripprefix.prefixes=/ontologies/" 
      - "traefik.http.services.ontologies-app.loadbalancer.server.port=5000"
    networks:
      - app_net

  parameters_database:
    image: postgres:latest
    environment:
      POSTGRES_DB: PARAMETER_DB
      POSTGRES_USER: USER_PARAMETER_DB
      POSTGRES_PASSWORD: PARAMETER_PASSWORD_ULTA_SECRETO
    networks:
      - parameters_net
  
  users_database:
    image: postgres:latest
    environment:
      POSTGRES_DB: USER_DB
      POSTGRES_USER: USER_USER_DB
      POSTGRES_PASSWORD: USER_PASSWORD_ULTA_SECRETO
    networks:
      - users_net

networks:
  app_net:
    driver: bridge
  front_net:
    driver: bridge
  parameters_net:
    driver: bridge
  users_net:
    driver: bridge